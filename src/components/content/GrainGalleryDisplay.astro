---
import type { ProcessedGrainGallery } from '../../lib/services/grain-gallery-service';

interface Props {
  gallery: ProcessedGrainGallery;
  showDescription?: boolean;
  showTimestamp?: boolean;
  showCollections?: boolean;
  columns?: number;
}

const { 
  gallery, 
  showDescription = true, 
  showTimestamp = true, 
  showCollections = false,
  columns = 3 
} = Astro.props;

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

const gridCols = {
  1: 'grid-cols-1',
  2: 'grid-cols-2',
  3: 'grid-cols-3',
  4: 'grid-cols-4',
  5: 'grid-cols-5',
  6: 'grid-cols-6',
}[columns] || 'grid-cols-3';

// Determine image layout based on number of images
const getImageLayout = (imageCount: number) => {
  if (imageCount === 1) return 'grid-cols-1';
  if (imageCount === 2) return 'grid-cols-2';
  if (imageCount === 3) return 'grid-cols-3';
  if (imageCount === 4) return 'grid-cols-2 md:grid-cols-4';
  return gridCols;
};

const imageLayout = getImageLayout(gallery.images.length);
---

<article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">
  <header class="mb-4">
    <div class="flex items-start justify-between mb-2">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
        {gallery.title}
      </h2>
      <div class="flex items-center gap-2">
        <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs">
          {gallery.id}
        </span>
      </div>
    </div>
    
    {showDescription && gallery.description && (
      <div class="text-gray-600 dark:text-gray-400 mb-3">
        {gallery.description}
      </div>
    )}
    
    <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
      {showTimestamp && (
        <span>
          Created on {formatDate(gallery.createdAt)}
        </span>
      )}
      
      <span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded text-xs">
        {gallery.images.length} image{gallery.images.length !== 1 ? 's' : ''}
      </span>
      
      <span class="bg-green-100 dark:bg-green-700 text-green-600 dark:text-green-300 px-2 py-1 rounded text-xs">
        {gallery.itemCount} item{gallery.itemCount !== 1 ? 's' : ''}
      </span>
    </div>
    
    {showCollections && gallery.collections.length > 0 && (
      <div class="mb-4">
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-1">Collections:</p>
        <div class="flex flex-wrap gap-1">
          {gallery.collections.map((collection) => (
            <span class="bg-purple-100 dark:bg-purple-800 text-purple-600 dark:text-purple-300 px-2 py-1 rounded text-xs">
              {collection}
            </span>
          ))}
        </div>
      </div>
    )}
  </header>
  
  {gallery.images && gallery.images.length > 0 && (
    <div class={`grid ${imageLayout} gap-4`}>
      {gallery.images.map((image, index) => (
        <div class="relative group">
          <img 
            src={image.url} 
            alt={image.alt || `Gallery image ${index + 1}`} 
            class="w-full h-48 object-cover rounded-lg transition-transform duration-200 group-hover:scale-105"
            loading="lazy"
          />
          {(image.alt || image.caption) && (
            <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-sm p-2 rounded-b-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200">
              {image.alt || image.caption}
            </div>
          )}
        </div>
      ))}
    </div>
  )}
  
  <footer class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
      <span>Gallery ID: {gallery.id}</span>
      <span>Collections: {gallery.collections.join(', ')}</span>
    </div>
  </footer>
</article> 