---
import { AtprotoBrowser } from '../../lib/atproto/atproto-browser';
import { loadConfig } from '../../lib/config/site';
import type { AtprotoRecord } from '../../lib/atproto/atproto-browser';
import { extractCidFromBlobRef, blobCdnUrl } from '../../lib/atproto/blob-url';


interface Props {
  collection?: string;
  limit?: number;
  feedUri?: string;
  showTimestamp?: boolean;
  live?: boolean;
}

const { 
  collection = 'app.bsky.feed.post', 
  limit = 10, 
  feedUri,
  showTimestamp = true,
  live = false,
} = Astro.props;

const config = loadConfig();
const handle = config.atproto.handle;
const browser = new AtprotoBrowser();

// Helper function to get image URL from blob reference
const getImageUrl = (imageRef: unknown) => {
  const cid = extractCidFromBlobRef(imageRef);
  if (!cid) return '';
  const did = config.atproto.did;
  if (!did) return '';
  return blobCdnUrl(did, cid);
};

// Helper function to format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  });
};

// Fetch data based on whether it's a feed or collection with error handling
let records: AtprotoRecord[] = [];
try {
  if (feedUri) {
    records = await browser.getFeed(feedUri, limit);
  } else {
    const res = await browser.getCollectionRecords(handle, collection, limit);
    records = res?.records ?? [];
  }

} catch (error) {
  console.error('ContentFeed: Error fetching content:', error);
  records = [];
}
---

<div class="space-y-6">
  {records.length > 0 ? (
    <div id="feed-container" class="space-y-4" data-show-timestamp={String(showTimestamp)} data-initial-limit={String(limit)} data-did={config.atproto.did}>
      {records.map((record) => {
        if (record.value?.$type !== 'app.bsky.feed.post') return null;
        
        const post = record.value;
        return (
          <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 mb-4">
            <div class="text-gray-900 dark:text-white mb-3">
              {post.text}
            </div>
            
            {post.embed && (
              <div class="mb-3">
                {/* Handle image embeds */}
                {post.embed.$type === 'app.bsky.embed.images' && post.embed.images && (
                  <div class={`grid gap-2 ${post.embed.images.length === 1 ? 'grid-cols-1' : post.embed.images.length === 2 ? 'grid-cols-2' : 'grid-cols-3'}`}>
                    {post.embed.images.map((image: any) => {
                      const imageUrl = getImageUrl(image.image?.ref);
                      return (
                        <div class="relative">
                          <img 
                            src={imageUrl} 
                            alt={image.alt || 'Post image'} 
                            class="rounded-lg w-full h-auto object-cover"
                            style={`aspect-ratio: ${image.aspectRatio?.width || 1} / ${image.aspectRatio?.height || 1}`}
                          />
                        </div>
                      );
                    })}
                  </div>
                )}
                
                {/* Handle external link embeds */}
                {post.embed.$type === 'app.bsky.embed.external' && post.embed.external && (
                  <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-3">
                    <div class="text-sm text-gray-600 dark:text-gray-400 mb-1">
                      {post.embed.external.uri}
                    </div>
                    <div class="text-sm font-medium text-gray-900 dark:text-white">
                      {post.embed.external.title}
                    </div>
                    {post.embed.external.description && (
                      <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                        {post.embed.external.description}
                      </div>
                    )}
                  </div>
                )}
                
                {/* Handle record embeds (quotes/reposts) */}
                {post.embed.$type === 'app.bsky.embed.record' && post.embed.record && (
                  <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-gray-50 dark:bg-gray-700">
                    <div class="text-sm text-gray-600 dark:text-gray-400">
                      Quoted post
                    </div>
                  </div>
                )}
              </div>
            )}
            
            {showTimestamp && post.createdAt && (
              <div class="text-xs text-gray-500 dark:text-gray-400">
                {formatDate(post.createdAt)}
              </div>
            )}
          </article>
        );
      })}
    </div>
  ) : (
    <div class="text-center py-8 text-gray-500 dark:text-gray-400">
      <p>No posts found.</p>
      <p class="text-sm mt-2">Debug: Handle = {handle}, Records fetched = {records.length}</p>
    </div>
  )}
</div> 

{live && (
  <script>
    // @ts-nocheck
    const container = document.getElementById('feed-container');
    if (container) {
      const SHOW_TIMESTAMP = container.getAttribute('data-show-timestamp') === 'true';
      const INITIAL_LIMIT = Number(container.getAttribute('data-initial-limit') || '10');
      const maxPrepend = 20;
      const DID = container.getAttribute('data-did') || '';

      function extractCid(ref) {
        if (typeof ref === 'string') return ref;
        if (ref && typeof ref === 'object') {
          if (typeof ref.$link === 'string') return ref.$link;
          if (typeof ref.toString === 'function') return ref.toString();
        }
        return null;
      }

      function buildImagesEl(post, did) {
        if (post?.embed?.$type !== 'app.bsky.embed.images' || !post.embed.images) return null;
        const grid = document.createElement('div');
        const count = post.embed.images.length;
        const cols = count === 1 ? 'grid-cols-1' : count === 2 ? 'grid-cols-2' : 'grid-cols-3';
        grid.className = `grid gap-2 ${cols}`;
        for (const img of post.embed.images) {
          const cid = extractCid(img?.image?.ref);
          if (!cid) continue;
          const url = `https://bsky.social/xrpc/com.atproto.sync.getBlob?did=${encodeURIComponent(did)}&cid=${encodeURIComponent(cid)}`;
          const wrapper = document.createElement('div');
          wrapper.className = 'relative';
          const image = document.createElement('img');
          image.src = url;
          image.alt = img?.alt || 'Post image';
          image.className = 'rounded-lg w-full h-auto object-cover';
          const arW = (img?.aspectRatio && img.aspectRatio.width) || 1;
          const arH = (img?.aspectRatio && img.aspectRatio.height) || 1;
          // @ts-ignore
          image.style.aspectRatio = `${arW} / ${arH}`;
          wrapper.appendChild(image);
          grid.appendChild(wrapper);
        }
        return grid;
      }

      function buildPostEl(post, did) {
        const article = document.createElement('article');
        article.className = 'bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 mb-4';

        const textDiv = document.createElement('div');
        textDiv.className = 'text-gray-900 dark:text-white mb-3';
        textDiv.textContent = post?.text ? String(post.text) : '';
        article.appendChild(textDiv);

        const imagesEl = buildImagesEl(post, did);
        if (imagesEl) {
          const imagesWrap = document.createElement('div');
          imagesWrap.className = 'mb-3';
          imagesWrap.appendChild(imagesEl);
          article.appendChild(imagesWrap);
        }

        if (SHOW_TIMESTAMP && post?.createdAt) {
          const timeDiv = document.createElement('div');
          timeDiv.className = 'text-xs text-gray-500 dark:text-gray-400';
          timeDiv.textContent = new Date(post.createdAt).toLocaleDateString('en-US', { year:'numeric', month:'short', day:'numeric' });
          article.appendChild(timeDiv);
        }

        return article;
      }

      try {
        // Use shared jetstream instead of creating a new connection
        const { startSharedStream, subscribeToPosts } = await import('../../lib/atproto/jetstream-client');
        
        // Start the shared stream
        await startSharedStream();
        
        // Subscribe to new posts
        const unsubscribe = subscribeToPosts((event) => {
          if (event.commit.operation === 'create') {
            const el = buildPostEl(event.commit.record, event.did);
            // @ts-ignore
            container.insertBefore(el, container.firstChild);
            const posts = container.children;
            if (posts.length > maxPrepend + INITIAL_LIMIT) {
              if (container.lastElementChild) container.removeChild(container.lastElementChild);
            }
          }
        });
        
        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
          unsubscribe();
        });
      } catch (e) {
        console.error('jetstream start error', e);
      }
    }
  </script>
)}