---
import Layout from '../layouts/Layout.astro';
import { AtprotoBrowser } from '../lib/atproto/atproto-browser';
import { loadConfig } from '../lib/config/site';

const config = loadConfig();
const browser = new AtprotoBrowser();

let debugInfo = {
  config: null,
  repoInfo: null,
  collections: [],
  testResults: [],
  error: null
};

try {
  debugInfo.config = {
    handle: config.atproto.handle,
    did: config.atproto.did,
    pdsUrl: config.atproto.pdsUrl
  };

  if (config.atproto.handle && config.atproto.handle !== 'your-handle-here') {
    // Test 1: Resolve handle
    console.log('üîç Testing handle resolution...');
    const resolvedDid = await browser.resolveHandle(config.atproto.handle);
    debugInfo.testResults.push({
      test: 'Handle Resolution',
      success: !!resolvedDid,
      result: resolvedDid,
      error: null
    });

    // Test 2: Get repo info
    console.log('üìä Testing repo info...');
    const repoInfo = await browser.getRepoInfo(config.atproto.handle);
    debugInfo.repoInfo = repoInfo;
    debugInfo.testResults.push({
      test: 'Repository Info',
      success: !!repoInfo,
      result: repoInfo ? {
        did: repoInfo.did,
        handle: repoInfo.handle,
        collections: repoInfo.collections.length,
        recordCount: repoInfo.recordCount
      } : null,
      error: null
    });

    if (repoInfo) {
      debugInfo.collections = repoInfo.collections;

      // Test 3: Get records from first collection
      if (repoInfo.collections.length > 0) {
        const firstCollection = repoInfo.collections[0];
        console.log(`üì¶ Testing collection: ${firstCollection}`);
        const records = await browser.getCollectionRecords(config.atproto.handle, firstCollection, 5);
        debugInfo.testResults.push({
          test: `Collection Records (${firstCollection})`,
          success: !!records,
          result: records ? {
            collection: records.collection,
            recordCount: records.recordCount,
            sampleRecords: records.records.slice(0, 2).map(r => ({
              uri: r.uri,
              $type: r.$type,
              collection: r.collection
            }))
          } : null,
          error: null
        });
      }
    }
  }
} catch (error) {
  debugInfo.error = error;
  console.error('API Debug Error:', error);
}
---

<Layout title="API Debug">
  <div class="container mx-auto px-4 py-8">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
        API Debug
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        Testing ATProto API calls and configuration
      </p>
    </header>

    <main class="max-w-6xl mx-auto space-y-8">
      {debugInfo.error ? (
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-8">
          <h3 class="text-xl font-semibold text-red-800 dark:text-red-200 mb-4">
            Error
          </h3>
          <p class="text-red-700 dark:text-red-300 mb-4">
            {debugInfo.error instanceof Error ? debugInfo.error.message : String(debugInfo.error)}
          </p>
          <pre class="bg-red-100 dark:bg-red-800 p-3 rounded text-xs overflow-x-auto">
{JSON.stringify(debugInfo.error, null, 2)}
          </pre>
        </div>
      ) : (
        <>
          <!-- Configuration -->
          <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-2">
              Configuration
            </h3>
            <div class="text-sm text-blue-700 dark:text-blue-300">
              <pre class="bg-blue-100 dark:bg-blue-800 p-3 rounded text-xs overflow-x-auto">
{JSON.stringify(debugInfo.config, null, 2)}
              </pre>
            </div>
          </div>

          <!-- Test Results -->
          <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-green-800 dark:text-green-200 mb-2">
              API Test Results
            </h3>
            <div class="space-y-4">
              {debugInfo.testResults.map((test, index) => (
                <div class="bg-green-100 dark:bg-green-800 p-4 rounded">
                  <div class="flex items-center justify-between mb-2">
                    <h4 class="font-semibold text-green-800 dark:text-green-200">
                      {test.test}
                    </h4>
                    <span class={`px-2 py-1 rounded text-xs ${
                      test.success 
                        ? 'bg-green-200 text-green-800 dark:bg-green-700 dark:text-green-200' 
                        : 'bg-red-200 text-red-800 dark:bg-red-700 dark:text-red-200'
                    }`}>
                      {test.success ? '‚úÖ Success' : '‚ùå Failed'}
                    </span>
                  </div>
                  {test.result && (
                    <pre class="text-xs bg-green-200 dark:bg-green-700 p-2 rounded overflow-x-auto">
{JSON.stringify(test.result, null, 2)}
                    </pre>
                  )}
                  {test.error && (
                    <p class="text-red-600 dark:text-red-400 text-xs mt-2">
                      Error: {test.error}
                    </p>
                  )}
                </div>
              ))}
            </div>
          </div>

          <!-- Repository Info -->
          {debugInfo.repoInfo && (
            <div class="bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-2">
                Repository Information
              </h3>
              <div class="text-sm text-purple-700 dark:text-purple-300">
                <p><strong>DID:</strong> {debugInfo.repoInfo.did}</p>
                <p><strong>Handle:</strong> {debugInfo.repoInfo.handle}</p>
                <p><strong>Record Count:</strong> {debugInfo.repoInfo.recordCount}</p>
                <p><strong>Collections:</strong> {debugInfo.repoInfo.collections.length}</p>
                <div class="mt-2">
                  <p class="font-semibold">Collections:</p>
                  <ul class="list-disc list-inside space-y-1">
                    {debugInfo.repoInfo.collections.map((collection) => (
                      <li class="bg-purple-100 dark:bg-purple-800 px-2 py-1 rounded text-xs">
                        {collection}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          )}

          <!-- Raw Debug Info -->
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
              Raw Debug Information
            </h3>
            <div class="text-sm text-gray-600 dark:text-gray-400">
              <pre class="bg-gray-100 dark:bg-gray-700 p-3 rounded text-xs overflow-x-auto">
{JSON.stringify(debugInfo, null, 2)}
              </pre>
            </div>
          </div>
        </>
      )}
    </main>
  </div>
</Layout> 