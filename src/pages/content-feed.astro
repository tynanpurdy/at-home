---
import Layout from '../layouts/Layout.astro';
import { ContentSystem } from '../lib/services/content-system';
import { loadConfig } from '../lib/config/site';

const config = loadConfig();
const contentSystem = new ContentSystem();

let contentFeed = null;
let error = null;

try {
  if (config.atproto.handle && config.atproto.handle !== 'your-handle-here') {
    // Initialize content system (build-time gathering + runtime streaming)
    contentFeed = await contentSystem.initialize(config.atproto.handle, {
      enableStreaming: true,
      maxItems: 200
    });
  }
} catch (err) {
  error = err;
  console.error('Content feed: Error:', err);
}

// Helper function to format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// Helper function to get service icon
const getServiceIcon = (service: string) => {
  const icons = {
    'grain.social': '🌾',
    'bsky.app': '🔵',
    'sh.tangled': '🪢',
    'unknown': '❓'
  };
  return icons[service] || icons.unknown;
};

// Helper function to truncate text
const truncateText = (text: string, maxLength: number = 100) => {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};
---

<Layout title="Content Feed">
  <div class="container mx-auto px-4 py-8">
    <header class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Content Feed
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
        All your ATProto content with real-time updates
      </p>
    </header>

    <main class="max-w-6xl mx-auto">
      {error ? (
        <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-8">
          <h3 class="text-xl font-semibold text-red-800 dark:text-red-200 mb-4">
            Error Loading Content
          </h3>
          <p class="text-red-700 dark:text-red-300 mb-4">
            {error instanceof Error ? error.message : String(error)}
          </p>
        </div>
      ) : contentFeed ? (
        <div class="space-y-8">
          <!-- Content Feed Stats -->
          <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-blue-800 dark:text-blue-200 mb-2">
              Content Feed Stats
            </h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-blue-700 dark:text-blue-300">
              <div>
                <p class="font-semibold">Total Items</p>
                <p class="text-2xl">{contentFeed.totalItems}</p>
              </div>
              <div>
                <p class="font-semibold">Collections</p>
                <p class="text-2xl">{contentFeed.collections.length}</p>
              </div>
              <div>
                <p class="font-semibold">Last Updated</p>
                <p class="text-sm">{formatDate(contentFeed.lastUpdated)}</p>
              </div>
              <div>
                <p class="font-semibold">Status</p>
                <p class="text-sm" id="streaming-status">Loading...</p>
              </div>
            </div>
          </div>

          <!-- Content Items -->
          <div class="space-y-4">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
              All Content ({contentFeed.items.length} items)
            </h2>
            
            {contentFeed.items.length > 0 ? (
              <div class="space-y-4" id="content-feed">
                {contentFeed.items.map((item, index) => (
                  <article class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                    <header class="flex items-start justify-between mb-4">
                      <div class="flex items-center gap-3">
                        <span class="text-2xl">{getServiceIcon(item.service)}</span>
                        <div>
                          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                            {item.$type}
                          </h3>
                          <p class="text-sm text-gray-500 dark:text-gray-400">
                            Collection: {item.collection}
                          </p>
                        </div>
                      </div>
                      <div class="text-right text-sm text-gray-500 dark:text-gray-400">
                        <p>{formatDate(item.createdAt)}</p>
                        <p class="text-xs">{item.operation || 'existing'}</p>
                      </div>
                    </header>
                    
                    <div class="mb-4">
                      <div class="flex items-center gap-2 mb-2">
                        <span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded text-xs">
                          {item.service}
                        </span>
                        <span class="bg-blue-100 dark:bg-blue-700 text-blue-600 dark:text-blue-300 px-2 py-1 rounded text-xs">
                          {item.$type}
                        </span>
                      </div>
                      
                      {item.value?.text && (
                        <p class="text-gray-900 dark:text-white mb-3">
                          {truncateText(item.value.text, 200)}
                        </p>
                      )}
                      
                      {item.value?.title && (
                        <p class="font-semibold text-gray-900 dark:text-white mb-2">
                          {item.value.title}
                        </p>
                      )}
                      
                      {item.value?.description && (
                        <p class="text-gray-600 dark:text-gray-400 mb-3">
                          {truncateText(item.value.description, 150)}
                        </p>
                      )}
                    </div>
                    
                    <footer class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <span>URI: {item.uri.substring(0, 50)}...</span>
                      <span>CID: {item.cid.substring(0, 10)}...</span>
                    </footer>
                  </article>
                ))}
              </div>
            ) : (
              <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-8">
                <h3 class="text-xl font-semibold text-yellow-800 dark:text-yellow-200 mb-4">
                  No Content Found
                </h3>
                <p class="text-yellow-700 dark:text-yellow-300 mb-4">
                  No content was found for your account. This could mean:
                </p>
                <ul class="text-yellow-600 dark:text-yellow-400 text-sm list-disc list-inside space-y-1">
                  <li>You haven't posted any content yet</li>
                  <li>The content is in a different collection</li>
                  <li>There's an issue with the API connection</li>
                  <li>The content format isn't recognized</li>
                </ul>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div class="text-center py-12">
          <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-8">
            <h3 class="text-xl font-semibold text-yellow-800 dark:text-yellow-200 mb-4">
              Configuration Required
            </h3>
            <p class="text-yellow-700 dark:text-yellow-300 mb-4">
              To view your content feed, please configure your Bluesky handle in the environment variables.
            </p>
            <div class="text-sm text-yellow-600 dark:text-yellow-400">
              <p class="mb-2">Create a <code class="bg-yellow-100 dark:bg-yellow-800 px-1 rounded">.env</code> file with:</p>
              <pre class="bg-yellow-100 dark:bg-yellow-800 p-3 rounded text-xs overflow-x-auto">
ATPROTO_HANDLE=your-handle.bsky.social
SITE_TITLE=Your Site Title
SITE_AUTHOR=Your Name</pre>
            </div>
          </div>
        </div>
      )}
    </main>
  </div>
</Layout>

<script>
  // Real-time updates (client-side)
  if (typeof window !== 'undefined') {
    // This would be implemented with WebSocket or Server-Sent Events
    // For now, we'll just update the streaming status
    const streamingStatus = document.getElementById('streaming-status');
    if (streamingStatus) {
      streamingStatus.textContent = 'Streaming';
      streamingStatus.className = 'text-sm text-green-600 dark:text-green-400';
    }
  }
</script> 